import React, { useState, useEffect } from "react";
import "./home.scss";
import Slider from "react-slick";
import { introInfo, partyInfo, endows, promoSlides } from "./data-home";
import { Link } from "react-router-dom";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import DishDetailPopsup from "../dishDetail/DishDetailPopsup";
import BookingPopup from "../include/header/BookingPopup";
import { getFeaturedDishes } from "@services/client/dishDetailService";
import dishDefault from "@assets/admin/images/dish/dish-default.webp";

import BlurText from "../ui/BlurText";
import ClickSpark from "../ui/ClickSpark";
import HeroBanner from "./HeroBanner";

export default function Home() {
  const [showDetail, setShowDetail] = useState(false);
  const [selectedDish, setSelectedDish] = useState(null);
  const [showBooking, setShowBooking] = useState(false);
  const [dishes, setDishes] = useState([]);
  const fullUrl = `http://localhost:8000/storage/`;
  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 4,
    slidesToScroll: 1,
    arrows: true,
    responsive: [
      { breakpoint: 1200, settings: { slidesToShow: 4 } },
      { breakpoint: 992, settings: { slidesToShow: 2 } },
      { breakpoint: 576, settings: { slidesToShow: 1 } },
    ],
  };

  useEffect(() => {
    const fetchDishes = async () => {
      try {
        const res = await getFeaturedDishes();
        console.log(res);
        setDishes(Array.isArray(res.data) ? res.data : []);
      } catch (e) {
        console.error(e);
        setDishes([]);
      }
    };
    fetchDishes();
  }, []);

  return (
    <>
      <ClickSpark
        sparkColor="#fff"
        sparkSize={10}
        sparkRadius={15}
        sparkCount={8}
        duration={400}
      >
        <section className="hero-banner-section">
          <HeroBanner />
        </section>
        <section className="home-section">
          <div className="home-content">
            <BlurText
              text="Ho√†ng Gia Qu√°n ƒê·ªânh Cao ·∫®m Th·ª±c "
              delay={150}
              animateBy="words"
              direction="top"
              className="title-page"
            />
          </div>
        </section>

        {/* Section 2: M√≥n m·ªõi ra l√≤ */}
        <section className="new-menu-section">
          <h2 className="section-title">M√≥n m·ªõi ra l√≤</h2>

          <div className="slider-wrapper">
            <div className="slider-inner">
              <Slider {...settings}>
                {/* {console.log(dishes.map(d => d.id))} */}
                {dishes.map((d) => (
                  <div
                    key={d.id}
                    className="card-item small"
                    onClick={() => {
                      setSelectedDish(d);
                      setShowDetail(true);
                    }}
                    style={{ cursor: "pointer" }}
                  >
                    <div className="card-image">
                      <img
                        src={
                          d.image_url && d.image_url.trim() !== ""
                            ? `${fullUrl}${d.image_url}`
                            : dishDefault
                        }
                        alt={d.name}
                      />
                    </div>
                    <div className="card-info">
                      <h3>{d.name}</h3>
                      <p className="price">
                        {d.selling_price.toLocaleString()}ƒë
                      </p>
                      <button className="btn-order">+ ƒê·∫∑t</button>
                    </div>
                  </div>
                ))}
              </Slider>
            </div>
          </div>

          <div className="btn-wrap">
            <Link to="/menu-page" className="btn-view-menu">
              Xem th·ª±c ƒë∆°n
            </Link>
          </div>
        </section>

        {/* Section 3: ch·ªØ ch·∫°y */}
        <section className="promotion-section">
          <div className="marquee">
            <div className="marquee-track">
              <div className="marquee-content">
                ∆ØU ƒê√ÉI HO√ÄNG GIA üîñ ∆ØU ƒê√ÉI HO√ÄNG GIA üîñ ∆ØU ƒê√ÉI HO√ÄNG GIA üîñ ∆ØU
                ƒê√ÉI HO√ÄNG GIA üîñ ∆ØU ƒê√ÉI HO√ÄNG GIA üîñ ∆ØU ƒê√ÉI HO√ÄNG GIA üîñ
              </div>
            </div>
          </div>
        </section>

        {/* Section 4: Khuy·∫øn m√£i & Tin t·ª©c */}
        <section className="promo-cards-section">
          <div className="slider-wrapper promo">
            <Slider {...settings}>
              {endows.map((item) => (
                <div key={item.id} className="card-item small">
                  <div className="card-image">
                    <img src={item.image} alt={item.description} />
                  </div>
                  <div className="card-info">
                    <h3>{item.description}</h3>
                    <button className="btn-receive">Xem Ngay</button>
                  </div>
                </div>
              ))}
            </Slider>
          </div>
          <div className="btn-wrap">
            <button className="btn-view-all">Xem t·∫•t c·∫£</button>
          </div>
        </section>

        {/* Section 5: Gi·ªõi thi·ªáu th∆∞∆°ng hi·ªáu */}
        <section className="intro-section">
          <div className="intro-container">
            <div className="intro-text">
              <h2>{introInfo.title}</h2>
              <ul>
                {introInfo.points.map((point, index) => (
                  <li key={index}>{point}</li>
                ))}
              </ul>
            </div>
            <div className="intro-image">
              <img src={introInfo.image} alt="Gi·ªõi thi·ªáu Qu√°n Nh·∫≠u Ho√†ng Gia" />
            </div>
          </div>
        </section>

        <div className="section-divider"></div>

        {/* Section 6: Ti·ªác t√πng */}
        <section className="party-section">
          <div className="party-container">
            <div className="party-image">
              <img src={partyInfo.image} alt="D·ªãch v·ª• ti·ªác t√πng Ho√†ng Gia" />
            </div>
            <div className="party-text">
              <h2>{partyInfo.title}</h2>
              <ul>
                {partyInfo.points.map((point, index) => (
                  <li key={index}>{point}</li>
                ))}
              </ul>
            </div>
          </div>
        </section>

        {/* Section 7: Club */}
        <section className="club-section">
          <div className="club-container">
            <h3 className="club-subtitle">HO√ÄNG GIA CLUB</h3>
            <h4 className="club-title">
              Gia nh·∫≠p Ho√†ng Gia <br />
              U·ªëng sang - ch∆°i ch·∫•t.
            </h4>
            <p className="club-description">
              Ho√†ng Gia Club l√† n∆°i h·ªôi t·ª• c·ªßa nh·ªØng t√¢m h·ªìn y√™u th√≠ch s·ª± sang
              tr·ªçng v√† ƒë·∫≥ng c·∫•p. T·∫°i ƒë√¢y, b·∫°n s·∫Ω ƒë∆∞·ª£c tr·∫£i nghi·ªám nh·ªØng ly r∆∞·ª£u
              th∆∞·ª£ng h·∫°ng, nh·ªØng m√≥n ƒÉn tinh t·∫ø v√† nh·ªØng kho·∫£nh kh·∫Øc ƒë√°ng nh·ªõ
              b√™n b·∫°n b√® v√† ng∆∞·ªùi th√¢n.
            </p>
            <button className="club-cta" onClick={() => setShowBooking(true)}>
              ƒê·∫∂T B√ÄN NGAY
            </button>
          </div>
        </section>

        {/* Section 8: Slider khuy·∫øn m√£i nhi·ªÅu c·ªôt */}
        <section className="promo-slider-section">
          <div className="promo-slider-container">
            <Slider
              autoplay
              autoplaySpeed={4500}
              infinite
              speed={1000}
              slidesToShow={2}
              slidesToScroll={1}
              dots={false}
              arrows={false}
              responsive={[
                { breakpoint: 1200, settings: { slidesToShow: 2 } },
                { breakpoint: 768, settings: { slidesToShow: 1 } },
              ]}
            >
              {promoSlides.map((item) => (
                <div key={item.id} className="promo-slide-item">
                  <img src={item.image} alt={item.alt} />
                </div>
              ))}
            </Slider>
          </div>
        </section>
      </ClickSpark>

      <DishDetailPopsup
        isOpen={showDetail}
        onClose={() => setShowDetail(false)}
        dish={selectedDish}
      />
      {/* <Footer onOpenBooking={() => setShowBooking(true)} /> */}
      <BookingPopup
        isOpen={showBooking}
        onClose={() => setShowBooking(false)}
      />
    </>
  );
}
